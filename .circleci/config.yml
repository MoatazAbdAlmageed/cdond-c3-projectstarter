version: 2.1 

commands:
  install_awscli:
    description: Install aws cli v2
    steps:
      - run: 
          name: Install aws cli 
          command: |
              #sudo apt update 
              sudo apt -y update 
              sudo apt-get install -f
              sudo apt-get update  --fix-missing
              sudo apt-get update 
              #sudo apt-get install awscli
              #sudo  install  awscli
              curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
              sudo apt-get install zip 
              sudo apt-get install unzip 
              sudo apt -y install vim 
              sudo unzip awscliv2.zip 
              sudo ./aws/install 
              sudo ./aws/install --bin-dir /usr/local/bin --install-dir /usr/local/aws-cli --update


  install_nodemodules:
    description: Install nod modules
    steps:
      - run: 
          name: Install aws cli 

          command: |
            sudo npm install -g node-modules
            sudo npm run build
            sudo npm i -g npm 
            sudo   npm run build -prod
            sudo npm install 




  ### #install_ansible:
  #  description: Install Ansible
  # # steps:
  #    - run:
  #        name: Install Ansible
  #        command: |
  ##  ####          python3 -m pip install --user ansible

  install_ansible:
    description: install ansible 
    steps:
      - run: 
          name: install ansible f
          command: |
              sudo apt update 
              #sudo apt install software-properties-common -y 
              sudo add-apt-repository --yes --update ppa:ansible/ansible
              #sudo apt -y update && apt install -y python3
              sudo apt install -y python3
              sudo apt install -y ansible 
  install_nodejs:
    description: Install Node.js 13.8.0
    steps:
      - run:
          name: Install Node.js 13.8.0
          command: |
            # Install Node.js LTS version as our base Node.js version
            curl -fsSL https://deb.nodesource.com/setup_lts.x | sudo -E bash -
            sudo apt install -y nodejs
            # Use n version manager to use Node.js v13.8.0
            sudo npm install --global n
            sudo n 13.8.0  



  # install_nodejs:
  #   description: Install Node.js 13.8.0
  # #  steps:
  #     - run:
  #         name: Install Node.js 13.8.0
  #         command: |
  #           # Install Node.js LTS version as our base Node.js version
  #           curl -fsSL https://deb.nodesource.com/setup_lts.x | sudo -E bash -
  #           sudo apt install -y 
  #           curl -fsSL https://deb.nodesource.com/setup_15.x | sudo -E bash -
  #           sudo apt-get install -y nodejs
  #           sudo npm install -g tsc
  #           sudo npm install -g concurrently
  #           sudo npm install -g ts-node
  #           sudo npm install -g typescript
  #           sudo apt install -y nodejs
  #           npm run build
  #           sudo npm install
  #           npm install mongodb
  #           npm install pg
  #           npm init -y
  #           sudo npm start
  #           # Use n version manager to use Node.js v13.8.0
  #           sudo npm install --global n
  #           sudo n 13.8.0


  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      Workflow_ID:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - run:
          name: Destroy environments
          # when: on_fail
          command: |

            # Delete backend stack
            aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.Workflow_ID >> 
            
            ## Empty frontend bucket
            aws s3 rm s3://udapeople-<<parameters.Workflow_ID>> --recursive

            # Delete frontend stack
            aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.Workflow_ID >> 

  revert-migrations:
      description: Revert the last migration, if any were executed during the current workflow
      parameters:
        Workflow_ID:
          type: string
          default: ${CIRCLE_WORKFLOW_ID:0:7}
      steps:
        - run:
            name: Revert migrations
            when: on_fail
            command: |
              SUCCESS=$(curl --insecure  https://kvdb.io/${KVDB_BUCKET}/migration_<< parameters.Workflow_ID >>)

              # Logic for reverting the database state
              if (( $SUCCESS == 1 ));
              then
                cd ~/project/backend
                npm install
                npm audit fix
                npm -y install
                npm run migration:revert
              fi          
#****************************************************************
           
## commands:
#   destroy-environment:
#     description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
#     parameters:
#       # Add parameter here   
#     steps:
#       - run:
#           name: Destroy environments
#           when: on_fail
#           command: |
#             # Your code here
#             exit 1
#************************************************
#   revert-migrations:
#     description: Revert the last migration if successfully run in the current workflow.
#     parameters:
#       # Add parameter here     
#     steps:
#       - run:
#           name: Revert migrations
#           # Add when this will run
#           command: |
#             # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
#             SUCCESS = 1
#             if(( $SUCCESS==1 )); 
#             then
#             #  cd ~/project/backend
#             #  npm install
#             #  Add revert code here. You can find this in the Getting Started section.
#               exit 1
#             fi
#*********************************************************

####################################################################
jobs:
  build-frontend:
    docker:
#- image: circleci/node:13.8.0
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          #keys: [frontend-build]
          keys: [frontend-build-depend]
      - run:
          ### name: Build front-end
          # command: |
          #   # Your code here
          #   exit 1
          
          name: Build front-end
          command: |
            cd frontend
            npm install 
            npm run build
                
          
      # - save_cache:
      #     paths: [frontend/node_modules]
      #     key: frontend-build

      - save_cache:
            paths: [frontend/node_modules]
            key: frontend-build-depend
            ##
      

  # build-backend:
  #   docker:
  #     - image: circleci/node:13.8.0
  #   steps:
  #     - checkout
  #     - restore_cache:
  #         keys: [backend-build]
  #     - run:
  #         name: Back-end build
  #         command: |
  #            # Your code here
  #            exit 1
  #     - save_cache:
  #         paths: [backend/node_modules]
  #         key: backend-build

  build-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build-depend]
      - run:
          name: Back-end build
          command: |
            cd backend 
            sudo npm install -g typescript
            # npm i ts-node typescript
            npm install
            npm run build
      ##- install_nodemodules      
      - save_cache:
            paths: [backend/node_modules]
            key: backend-build-depend
  
#**********************************


#   test-frontend:
#     docker:
#       # Docker image here
#     steps:
#       # Checkout code from git
#       # Restore from cache
#       # Your job code here
                
#   test-backend:
#     docker:
#       # Docker image here
#     steps:
#       # Checkout code from git
#       # Restore from cache
#       # Your job code here



#*****************************************
  test-frontend:
    docker:
      - image: cimg/node:13.8.0 # Docker image here
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build-depend]
      - run:
          name: front-end-unit-test
          command: |
            cd frontend
            npm install 
            npm run test
                
  test-backend:
    docker:
      - image: cimg/node:13.8.0 # Docker image here
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build-depend]
      - run:
          name: Back-end unit-test
          command: |
            sudo apt-get update && sudo apt-get -y upgrade
            sudo apt purge snapd 
            #sudo apt update
            #sudo apt list --upgradable 
            sudo apt install update-manager-core -y
            # sudo do-release-upgrade 
            # sudo apt upgrade 
            sudo apt-get install libc6 
            cd backend 
            # Locally in your project.
            sudo  npm install -D typescript
            sudo  npm install -D ts-node

            # Or globally with TypeScript.
            sudo npm install -g typescript
            sudo npm install -g ts-node

            # Depending on configuration, you may also need these
            sudo npm install -D tslib @types/node
            sudo npm install --save ioredis@4.28.5
            sudo npm install --save-dev @types/ioredis@4.28.10
            sudo npm install 
            sudo npm install -g jest
            #sudo npm run test
            sudo rm -rf node_modules && rm ./package-lock.json && npm install
           # sudo npm run test --if-present
#***********************************
            
##   scan-frontend:
#     docker:
#       # Docker image here
#     steps:
#       # Checkout code from git
#       # Restore from cache
#       # Your job code here

#   scan-backend:
#     docker:
#       # Docker image here
#     steps:
#       # Checkout code from git
#       # Restore from cache
#       # Your job code here

#*******************************

  scan-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
     - checkout
     - restore_cache:
          keys: [front-build-depend]
     - run:
          name: front-end scan
          command: |
            cd frontend
            npm install 
            npm audit fix --force --audit-level=critical
            npm audit fix
            npm audit --audit-level=critical
  
  scan-backend:    
    docker:
      - image: cimg/node:13.8.0
           
    steps:
     - checkout
     - restore_cache:
          keys:
            - backend-deps-{{ checksum "backend/package-lock.json" }}
    #  - restore_cache:
    #       keys: [backend-build-depend]
     - run:
          name: Back-end scan
          command: |
              cd backend
              npm install 
              npm audit fix --force --audit-level=critical
              npm audit fix --force --audit-level=critical
              npm audit fix
              npm audit fix
              npm audit fix
   #  ##         # npm audit --audit-level=critical

   #****************************************************
  

  deploy-infrastructure:
    docker: 
      - image: cimg/base:stable
    steps:
      - checkout
      - install_awscli
      # - run : 
      #     name: install_awscli
      #     command: |
      #         curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
      #         unzip awscliv2.zip
      #         sudo ./aws/install 
      - run : 
            name: Ensure back-end infrastructure exist
            command: |
              aws cloudformation deploy \
                --template-file .circleci/files/backend.yml \
                --tags project=udapeople \
                --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
      - run :
            name: Ensure front-end infrastructure exist
            command: |
              aws cloudformation deploy \
                --template-file .circleci/files/frontend.yml \
                --tags project=udapeople \
                --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
                #exit 1

      - run:
          name: Add back-end ip to ansible inventory
          command: |
            BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            echo $BACKEND_PUBLIC_IP >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt        
      - persist_to_workspace:
            root: ~/
            paths:
              - project/.circleci/ansible/inventory.txt   
      #- destroy-environment 

#********************************************************************
###   configure-infrastructure:
#     docker:
#       # Docker image here that supports Ansible
#     steps:
#       # Checkout code from git
#       # Add ssh keys with fingerprint
#       # attach workspace
#       - run:
#           name: Install dependencies
#           command: |
#             # Your code here
#             exit 1
#       - run:
#           name: Configure server
#           command: |
#             # Your code here
#             exit 1
# # #     # Here's where you will add some code to rollback on failure  

#***********************************************************************

  configure-infrastructure:
    docker:
    - image: cimg/base:stable
    steps:
    - checkout
    - install_ansible
    - install_awscli
    - add_ssh_keys:
       fingerprints: ["cb:db:e8:a8:0f:2f:dc:19:ca:c0:f1:db:6f:ef:9d:8c"]
    - attach_workspace:
        at: ~/
    - run:
       name: Run Configure Server Ansible play
       command: |
         cd .circleci/ansible
         cat inventory.txt
         ansible-playbook -i inventory.txt configure-server.yml
    #- destroy-environment


#######*******************************######################
#   run-migrations:
#     docker:
#       # Docker image here that supports NodeJS
#     steps:
#       # Checkout code from git
#       - run:
#           name: Run migrations
#           command: |
#             # Your code here
#             exit 1
#       - run:
#           name: Send migration results to memstash or kvdb.io
#           command: |
#             # Your code here
#             exit 1
#      # Here's where you will add some code to rollback on failure   

#************************************************************************

  # run-migrations:
  #   docker:
  #     - image: cimg/node:13.8.0
  #   steps:
  #     - checkout 
  #     - restore_cache:
  #        keys: [backend-deps]
     
  #     - run:
  #         name: Run migrations
  #         command: |
  #           cd backend
  #           sudo npm install 
  #           # sudo npm install rxjs@6.0.0 --save
  #           # sudo npm cache clean --force
  #           # sudo npm cache clean --force
            
  #           # sudo npm update
  #           # sudo npm run build
  #           # sudo npm install typescript -g
  #           # sudo npm run build
  #           # sudo npm install -g
  #           # sudo tsc --build tsconfig-simple.json
  #           # sudo rm -rf node_modules/ package-lock.json
  #           # sudo npm cache clean --force
  #           # sudo npm install -D @types/node 
  #           # sudo npm i --unsafe-perm  
  #           # sudo tslint --fix src/**/*.ts -t verbose      
  #           sudo npm run migrations > migrations_dump.
  #     - run:
  #         name: Send migration status to kvdb.io
  #         command: |
  #           if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
  #           then
  #             curl https://kvdb.io/${KVDB_BUCKET}/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
  #           fi 

          #- destroy-environment
  ## - revert-migrations


  run-migrations:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build-depend]
      - install_awscli
      - run:
          name: Run migrations
          command: |
                cd backend
                rm -rf node_modules && rm ./package-lock.json && npm install
                sudo npm install -g typescript
                sudo npm install -g ts-node
                sudo npm install 
                sudo npm start
                sudo chmod -R 777 *
                npm run migrations > migrations_dump.txt
                sudo chmod -R 777 * /usr/local/lib/node_modules
      - run: 
          name: Send migration status to kvdb.io
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              curl https://kvdb.io/${KVDB_BUCKET}/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            fi
      - destroy-environment
      # - revert-migrations


  ### run-migrations:
  #   docker:
  #     - image: cimg/node:13.8.0
  #   steps:
  #     - checkout
  #     - install_awscli
  #     - install_nodejs
  #     # - install_tsc
  #     # - install_ts-node
  #     - restore_cache:
  #        keys: [backend-deps]
  #     - run:
  #         name: Run migrations
  #         command: |
  #           cd backend 
  #           # sudo rm -rf node_modules
  #           # sudo rm -rf package-lock.json
  #           # sudo rm -rf yarn.lock
  #           # sudo rm -rf ~/.npm
  #           sudo npm install
  #           # sudo npm init -y
  #           # sudo npm install -g typescript
  #           # sudo npm install -g @angular/cli          
  #           # sudo npm install -g ts-node
  #           # sudo npm install -g typescript
  #           # sudo npm install -g npm-install-peers
  #           # sudo npm install -g @angular/cli
  #           # # sudo chown -R $(whoami) /usr/local/lib/
  #           # # sudo chown -R $(whoami) $(npm config get prefix)/{lib/node_modules,bin,share}
  ##           # # sudo chmod -R 777 /usr/local/lib/node_modules
  #           npm run migrations > migrations_dump.txt
  #           cat migrations_dump.txt
      # - run:
      #     name: Send migration status to kvdb.io
      #     command: |
      #       if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
      #       then
      #         curl https://kvdb.io/${KVDB_BUCKET}/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
      #       fi
#- destroy-environment
     # - revert-migrations

#--------------------------------------------
  # run-migrations:
  #     docker:
  #       - image: cimg/node:13.8.0
  #     steps:
  #       - checkout
  #       #- install_awscli  
  #       - run:
  #           name: run migrations
  #           command: |

  #             cd backend-
  #             npm install 
  #             npm cache clean --force
  #            
  #   
  #       - run: 
  #             name: send migration status to kvdb.io 
  #             command: 
  #               if grep -q "has been executed sucessfully." ~/project/backend/migrations_dump.txt
  #               then 
  #                 curl  https://kvdb.io/${KVDB_BUCKET}/migration_${CIRCLE_WORKFLOW_ID:0:7} -d '1'
  #               fi 
      #  - destroy-environment
      #   - revert-migrations 
#=========== ===== ========== ========================================
  # run-migrations:
  #   docker:
  #     - image: cimg/node:13.8.0
  #   steps:
  #     - checkout
  #     - install_awscli
  #     - run:
  #         name: Run migrations
  #         command: |
  #           sudo apt-get update && apt-get install -y apt-utils && apt-get install -y curl
  #           cd backend
  #           sudo npm cache clean --force
  #           sudo apt-get install -y nodejs
  #           sudo npm install -g tsc
  #           sudo npm install -g concurrently
  #           sudo npm install -g ts-node
  #           sudo npm install -g typescript
  #           sudo apt install -y nodejs
  #           npm install -g npm-install-peers
  #           npm-install-peers
  #           npm install -g install-
  #           npm install -g npm-install-peers
  #           npm install --save-dev @xxxxx/xxxxx@latest
  #           npm install -g npm-install-peers
  #           npm install npm -g
  #           npm install --save-dev @angular/cli@latest
  #           npm install
  #           npm start
  #           npm run build
  #           sudo npm install
  #           npm install mongodb
  #           npm install pg
  #           npm init -y
  #           sudo npm start
  #           npm run migrations > migrations_dump.txt
  #     - run:
  #         name: Send migration status to kvdb.io
  #         command: |
  #           if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
  #           then
  #             curl https://kvdb.io/${KVDB_BUCKET}/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
  #           fi
  #     #- destroy-environment
  #     #- revert-migrations



#********************************************************************
#   deploy-frontend:
#     docker:
#       # Docker image here that supports AWS CLI
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Get backend url
#           command: |
#             # your code here
#             export API_URL="http://${BACKEND_IP}:3030"
#             echo "${API_URL}"
#       - run:
#           name: Deploy frontend objects
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure   
#**************************************************             
  # deploy-frontend:
  #   docker:
  #     - image: cimg/python:3.10
  #   steps:
  #     - checkout
  #     - install_awscli
  #     - install_nodejs
  #     - restore_cache:
  #         keys: [backend-deps]
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           cd frontend
  #           npm install
  #     - run:
  #       name: Get backend url
  #       command: |
  #         BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
  #           --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
  #           --query 'Reservations[*].Instances[*].PublicIpAddress' \
  #           --output text)
  #         echo "API_URL=http://${BACKEND_PUBLIC_IP}:3030" >> frontend/.env
  #         cat frontend/.env

  #     - run:
  #       name: Deploy frontend objects
  #       command: |
  #             cd frontend
  #             npm run build
  #             aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
  #     - destroy-environment
  #     - revert-migrations
#***********************************************
#   deploy-backend:
#     docker:
#       # Docker image here that supports Ansible
#     steps:
#       # Checkout code from git
#       # Add ssh keys with fingerprint
#       # attach workspace
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Deploy backend
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure  
#*********************************************

  # deploy-backend:
  #   docker:
  #     - image: cimg/base:stable
  #   steps:
  #     - checkout
  #     - install_awscli
  #     - install_nodejs
  #     - install_ansible
  #     - install_awscli
  #     - add_ssh_keys:
  #      #fingerprints: ["12:ec:67:df:21:96:8f:d6:33:74:7a:05:e0:d7:aa:bf"]
  #      fingerprints: ["b5:e4:1a:3e:4e:74:af:7b:5a:45:ad:23:58:e7:dd:25"]
  

  #     - attach_workspace:
  #         at: ~/
  #     - restore_cache:
  #         keys:
  #           - [backend-deps]   
  ##     - run:
  #         name: Install dependencies
  #         command: |
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           cd backend
  #           npm install

  #     - run:
  #         name: Get backend url
  #         command: |
  #           BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
  #           --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
  #           --query 'Reservations[*].Instances[*].PublicIpAddress' \
  #           --output text)
  #           echo "API_URL=http://${BACKEND_PUBLIC_IP}:3030" >> frontend/.env
  #           cat frontend/.env  

  #     - run:
  #         name: Deploy frontend objects
  #         command: |
  #           cd frontend
  #           npm run build
  #           aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive   

  #     - destroy-environment
  #     - revert-migrations


#***********************************************
#   smoke-test:
#     docker:
#       # Lightweight Docker image 
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Get backend url
#           command: |
#             # your code here
#       - run:
#           name: Backend smoke test.
#           command: |
#             # your code here
#       - run:
#           name: Frontend smoke test.
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure  

#   cloudfront-update:
#     docker:
#       # Docker image here that supports AWS CLI
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Update cloudfront distribution
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure  

# cleanup:
#     docker:
#       # Docker image here
#     steps:
#       # Checkout code from git
#       - run:
#           name: Get old stack workflow id
#           command: |
#             # your code here
#             export OldWorkflowID="the id here"
#             export STACKS=[] #put the list of stacks here
#       - run:
#           name: Remove old stacks and files
#           command: |
#             if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
#             then
#               # your code here
#             fi
            

workflows:
  default:
    jobs:
      # - build-frontend
      # - build-backend
      # - test-frontend:
      #     requires: [build-frontend]
      # - test-backend:
      #     requires: [build-backend]
      # - scan-backend:
      #     requires: [build-backend]
      # - scan-frontend:
      #     requires: [build-frontend]
      # - deploy-infrastructure:
      #     requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      #     filters:
      #       branches:
      #         only: [master]
      # - configure-infrastructure
         # requires: [deploy-infrastructure]
      - run-migrations
          # requires: [configure-infrastructure]
      ## - deploy-frontend:
      #     requires: [run-migrations]
      ## - deploy-backend:
      #     requires: [run-migrations]
      ### - smoke-test:
      #     requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #    requires: [cloudfront-update]